{"version":3,"sources":["CKEditor.es6"],"names":[],"mappings":";;;;;;;;;;;;AACA;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAWa,Q,WAAA,Q,WAJZ,qBAAU;AACT,YAAU,UADD;AAET;AAFS,CAAV,C,UAME,kB,UACA,kB,UAEA,mB,UACA,qBAAU,MAAV,C;;;;;;AAYD,oBAAY,UAAZ,EAA+C,SAA/C,EAAoE,IAApE,EAAgF;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SAVhF,KAUgF,GAVxE,EAUwE;AAAA,SAThF,QASgF,QAThF,QASgF;AAAA,SARhF,SAQgF,QARhF,SAQgF;AAAA,SAPhF,QAOgF,QAPhF,QAOgF;AAAA,SANhF,eAMgF,QANhF,eAMgF;AAAA,SALhF,IAKgF,QALhF,IAKgF;;AAC9E,QAAI,SAAJ,EAAe;AACb,gBAAU,aAAV,GAA0B,IAA1B;AACA,WAAK,SAAL,GAAiB,SAAjB;AACD;AACD,SAAK,IAAL,GAAY,IAAZ;AACD;;;;;;;;;kCAKY;AACX,UAAI,KAAK,QAAT,EAAmB;AACjB,aAAK,QAAL,CAAc,kBAAd;AACA,aAAK,QAAL,CAAc,OAAd;AACA,aAAK,QAAL,GAAgB,IAAhB;AACD;AACF;;;;;;;;sCAKgB;;AAEf,UAAI,SAAS,KAAK,MAAL,IAAe,EAA5B;AACA,WAAK,YAAL,CAAkB,MAAlB;AACD;;;;;;;;kCAKa,K,EAAM;AAAA;;AAClB,WAAK,IAAL,CAAU,GAAV,CAAc,YAAM;AAClB,cAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACA,YAAI,MAAK,SAAT,EACA,MAAK,SAAL,CAAe,iBAAf,CAAiC,KAAjC;AACD,OAJD;AAKD;;;;;;;;iCAKa,M,EAAQ;AAAA;;AAEpB,UAAI,CAAC,QAAL,EAAe;AACb,gBAAQ,KAAR,CAAc,sCAAd;AACA;AACD;;;AAGD,WAAK,QAAL,GAAgB,SAAS,OAAT,CAAiB,KAAK,IAAL,CAAU,aAA3B,EAA0C,MAA1C,CAAhB;;;AAGA,WAAK,QAAL,CAAc,OAAd,CAAsB,KAAK,KAA3B;;;AAGA,WAAK,QAAL,CAAc,EAAd,CAAiB,QAAjB,EAA2B,YAAM;AAC/B,YAAI,QAAQ,OAAK,QAAL,CAAc,OAAd,EAAZ;;;AAGA,YAAI,OAAK,QAAT,EAAmB;AACjB,cAAG,OAAK,eAAR,EAAyB,aAAa,OAAK,eAAlB;AACzB,iBAAK,eAAL,GAAuB,WAAW,YAAM;AACtC,mBAAK,aAAL,CAAmB,KAAnB;AACA,mBAAK,eAAL,GAAuB,IAAvB;AACD,WAHsB,EAGpB,SAAS,OAAK,QAAd,CAHoB,CAAvB;;;AAMD,SARD,MAQK;AACH,iBAAK,aAAL,CAAmB,KAAnB;AACD;AACF,OAfD;AAgBD;;;;;;;;+BAKU,K,EAAM;AACf,WAAK,KAAL,GAAa,KAAb;AACA,UAAI,KAAK,QAAT,EACA,KAAK,QAAL,CAAc,OAAd,CAAsB,KAAtB;AACD;;;6BACQ,C,EAAE,CAAE;;;gCACF,CAAE;;;qCACI,E,EAAG;AAAC,WAAK,QAAL,GAAgB,EAAhB;AAAoB;;;sCACvB,E,EAAG;AAAC,WAAK,SAAL,GAAiB,EAAjB;AAAqB;;;;;;;gBArGlC,M;;;;;gBACA,Q;;;;;WAEU,wB;;;;;gBACA,I;;;AAYiB,qB,CAlBzB,Q;gGAAA,Q","file":"CKEditor.js","sourcesContent":["// Imports\nimport {\n  Component,\n  Directive,\n  Input,\n  Output,\n  ElementRef,\n  ViewChild,\n  Optional,\n  EventEmitter,\n  NgZone\n} from '@angular/core';\nimport {NgControl, ControlValueAccessor} from '@angular/forms';\n\n/**\n* CKEditor component\n* Usage :\n* <ckeditor [(ngModel)]=\"data\" [config]=\"{...}\" debounce=\"500\"></ckeditor>\n*/\n@Component({\n  selector: 'ckeditor',\n  template: `<textarea #host></textarea>`,\n})\nexport class CKEditor {\n\n  @Input() config;\n  @Input() debounce;\n\n  @Output() change = new EventEmitter();\n  @ViewChild('host') host;\n\n  value = '';\n  instance;\n  ngControl;\n  renderer;\n  debounceTimeout;\n  zone;\n\n  /**\n  * Constructor\n  */\n  constructor(elementRef:ElementRef, @Optional() ngControl:NgControl, zone:NgZone){\n    if (ngControl) {\n      ngControl.valueAccessor = this;\n      this.ngControl = ngControl;\n    }\n    this.zone = zone;\n  }\n\n  /**\n  * On component destroy\n  */\n  ngOnDestroy(){\n    if (this.instance) {\n      this.instance.removeAllListeners();\n      this.instance.destroy();\n      this.instance = null;\n    }\n  }\n\n  /**\n  * On component view init\n  */\n  ngAfterViewInit(){\n    // Configuration\n    var config = this.config || {};\n    this.ckeditorInit(config);\n  }\n\n  /**\n  * Value change process\n  */\n  onValueChange(value){\n    this.zone.run(() => {\n      this.change.emit(value);\n      if (this.ngControl)\n      this.ngControl.viewToModelUpdate(value);\n    });\n  }\n\n  /**\n  * CKEditor init\n  */\n  ckeditorInit( config ){\n\n    if (!CKEDITOR) {\n      console.error('Please include CKEditor in your page');\n      return;\n    }\n\n    // CKEditor replace textarea\n    this.instance = CKEDITOR.replace(this.host.nativeElement, config);\n\n    // Set initial value\n    this.instance.setData(this.value);\n\n    // CKEditor change event\n    this.instance.on('change', () => {\n      let value = this.instance.getData();\n\n      // Debounce update\n      if (this.debounce) {\n        if(this.debounceTimeout) clearTimeout(this.debounceTimeout);\n        this.debounceTimeout = setTimeout(() => {\n          this.onValueChange(value);\n          this.debounceTimeout = null;\n        }, parseInt(this.debounce));\n\n      // Live update\n      }else{\n        this.onValueChange(value);\n      }\n    });\n  }\n\n  /**\n  * Implements ControlValueAccessor\n  */\n  writeValue(value){\n    this.value = value;\n    if (this.instance)\n    this.instance.setData(value);\n  }\n  onChange(_){}\n  onTouched(){}\n  registerOnChange(fn){this.onChange = fn;}\n  registerOnTouched(fn){this.onTouched = fn;}\n}\n"]}